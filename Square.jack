// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/9/Square/Square.jack

/** Implements a graphical square.
    The square has top-left x and y coordinates, and a size. */
class Square {

   field int x, y; // screen location of the top-left corner of this square
   field int size; // length of this square, in pixels
   static int SCREEN;

   /** Constructs and draws a new square with a given location and size. */
   constructor Square new(int ax, int ay, int asize) {
      let x = ax;
      let y = ay;
      let size = asize;
      let SCREEN = 16384;
      do draw();
      return this;
   }

   method int getRightEdge(){
      return (x + size);
   }

   method int getLeftEdge(){
      return (x);
   }

   method int getBotEdge(){
      return (y + size);
   }

   method int getTopEdge(){
      return (y);
   }

   

   /** Disposes this square. */
   method void dispose() {
      do Memory.deAlloc(this);
      return;
   }

   /** Draws this square in its current (x,y) location */
   method void draw() {
      // Draws the square using the color black
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   /** Erases this square. */
   method void erase() {
      // Draws the square using the color white (background color)
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

    /** Increments the square size by 2 pixels (if possible). */
   method void incSize() {
      if (((y + size) < 254) & ((x + size) < 510)) {
         do erase();
         let size = size + 2;
         do draw();
      }
      return;
   }

   /** Decrements the square size by 2 pixels (if possible). */
   method void decSize() {
      if (size > 2) {
         do erase();
         let size = size - 2;
         do draw();
      }
      return;
   }

   /** Moves this square up by 2 pixels (if possible). */
   method void moveUp() {
      if (y > 1) {
         // Erases the bottom two rows of this square in its current location
         do Screen.setColor(false);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
         let y = y - 2;
         // Draws the top two rows of this square in its new location
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + size, y + 1);
      }
      return;
   }

   /** Moves the square down by 2 pixels (if possible). */
   method void moveDown() {
      if (checkColisionDown()){
         return;
      }

      if ((y + size) < 254){
         
      
      
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + size, y + 1);
         let y = y + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, (y + size) - 1, x + size, y + size);
      }
      return;
   }

   method boolean checkColisionDown(){
      var int leftPX;
      var int leftPY;
      var int midPX;
      var int midPY;
      var int rightPX;
      var int rightPY;
      //Get pixel positions for bottom border
      // pixels at left and right corners, and pixel between these two
      let leftPX = x;
      let leftPY = y + size;

      let midPX = (size / 2) + x;
      let midPY = y + size;

      let rightPX = x + size;
      let rightPY = y + size;
      //check if the pixel below one of these is currently "black" -> 1
      if (checkBlackPixel(leftPX, leftPY + 1) | checkBlackPixel(midPX, midPY + 1) | checkBlackPixel(rightPX, rightPY + 1)){
         /*do Output.printString("El pixel de abajo es negro");*/
         return true;
      }
      return false;


   }


   /*
    * Function to check if a given pixel es 0(white) or 1(black)
    * Given its position in scrren
   */
   method boolean checkBlackPixel(int xC , int yC){
      
      var int memoryBlock, picPosition, mask, i;
      let i = 0;
      let mask = 2;
      //calculate memory addres(word) from x and y coordinates
      let memoryBlock =  Memory.peek(SCREEN + (32 * yC) + (xC / 16));
      //calculate bit position that represent target pixel
      //from left to right -> right to left
      let picPosition =  (15 - (xC - ((xC / 16) * 16)));

      if (picPosition = 0){
         let mask = 1;// 0000 0000 0000 0001
      }
      if (picPosition = 15){
         let mask = 32767 + 1;// 1000 0000 0000 0000
      }
      else {
         while (i < picPosition){
            let mask = mask * 2;
            let i = i + 1;
         }
      }
      /*do Output.printString("    ");

      do Output.printInt(mask);
      do Output.printString("    ");

      do Output.printInt(memoryBlock);*/

      /*if ((mask & memoryBlock) = mask){
         return true;
      }*/

      return (mask & memoryBlock);
      
   }

   /** Moves the square left by 2 pixels (if possible). */
   method void moveLeft() {
      if (x > 1) {
         do Screen.setColor(false);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
         let x = x - 2;
         do Screen.setColor(true);
         do Screen.drawRectangle(x, y, x + 1, y + size);
      }
      return;
   }

   /** Moves the square right by 2 pixels (if possible). */
   method void moveRight() {
      if ((x + size) < 510) {
         do Screen.setColor(false);
         do Screen.drawRectangle(x, y, x + 1, y + size);
         let x = x + 2;
         do Screen.setColor(true);
         do Screen.drawRectangle((x + size) - 1, y, x + size, y + size);
      }
      return;
   }
}
